// firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function authed() { return request.auth != null; }
    function isSelf(uid) { return authed() && request.auth.uid == uid; }
    function isString(x) { return x is string; }
    function isBool(x) { return x is bool; }
    function isTimestamp(x) { return x is timestamp; }
    function inSet(x, arr) { return arr.hasAll([x]); }

    // Public read: investors page
    match /raises/{raiseId} {
      allow read: if true;
      allow write: if false;

      match /interest/{uid} {
        allow read: if isSelf(uid);
        allow create, update: if isSelf(uid)
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'uid','email','profileComplete','accredited','createdAt','updatedAt'
          ])
          && isString(request.resource.data.uid)
          && request.resource.data.uid == uid
          && isString(request.resource.data.email)
          && isBool(request.resource.data.profileComplete)
          && (request.resource.data.accredited == null || isBool(request.resource.data.accredited))
          && (request.resource.data.createdAt == null || isTimestamp(request.resource.data.createdAt))
          && (request.resource.data.updatedAt == null || isTimestamp(request.resource.data.updatedAt));
        allow delete: if false;
      }
    }

    // User profiles: user owns only their doc
    match /profiles/{uid} {
      allow read: if isSelf(uid);
      allow create, update: if isSelf(uid)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly([
          'name','location','accreditation','documents','createdAt','updatedAt'
        ])
        && (request.resource.data.name == null || isString(request.resource.data.name))
        && (request.resource.data.location == null || isString(request.resource.data.location))
        && (request.resource.data.accreditation == null || inSet(request.resource.data.accreditation, ['yes','no','unsure']))
        && (request.resource.data.documents == null || request.resource.data.documents is list)
        && (request.resource.data.createdAt == null || isTimestamp(request.resource.data.createdAt))
        && (request.resource.data.updatedAt == null || isTimestamp(request.resource.data.updatedAt));
      allow delete: if false;
    }

    // Mail queue: deny all client access. Admin SDK bypasses rules.
    match /mailQueue/{docId} {
      allow read, write: if false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
